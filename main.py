import os
import sys
import warnings
import argparse
import shutil
from os.path import exists, realpath, basename
from datetime import datetime
from core.trainer import Trainer
from core.evaluate import Evaluator

warnings.filterwarnings("ignore")

def main(config):

  if config.mode in ['train-sll', 'finetune-deq']:
    trainer = Trainer(config)
    trainer()

  elif config.mode in ['eval-sll', 'eval-deq']:
    evaluate = Evaluator(config)
    evaluate()


if __name__ == '__main__':

  parser = argparse.ArgumentParser(description='Train or Evaluate Lipschtitz DEQ.')

  # parameters training or eval
  parser.add_argument("--mode", type=str, choices=['train-sll', 'finetune-deq', 'eval-sll', 'eval-deq'],
                      help="Choice of the mode of execution.")
  parser.add_argument("--train_dir", type=str, help="Name of the training directory.", required=True)
  parser.add_argument("--data_dir", type=str, help="Name of the data directory.", required=True)
  parser.add_argument("--dataset", type=str,  default='cifar10', help="Dataset to use")
  parser.add_argument("--epochs", type=int, default=100, help="Number of epochs for training.")
  parser.add_argument("--offset", type=float, default=1.41421)
  parser.add_argument("--temperature", type=float, default=0.25)
  parser.add_argument("--lr", type=float, default=0.001)
  parser.add_argument("--batch_size", type=int, default=64, help="Batch size to use for training.")
  parser.add_argument("--gradient_clip_by_norm", type=float, default=None)
  parser.add_argument("--frequency_log_steps", type=int, default=10, help="Print log for every step.")
  parser.add_argument("--logging_verbosity", type=str, default='INFO')
  parser.add_argument("--save_checkpoint_epochs", type=int, default=5, help="Save checkpoint every epoch.")

  # parameters of the architectures
  parser.add_argument("--conv_depth", type=int, default=4, help="The depth of the Stable Resnet")
  parser.add_argument("--num_channels", type=int, default=8, help="The number of channels.")
  parser.add_argument("--dense_depth", type=int, default=2, help="The number of linear layers.")
  parser.add_argument("--n_features", type=int, default=512, help="Number of features to use for linear layers.")
  parser.add_argument("--conv_size", type=int, default=5, help="The size of the convolution kernel.")

  # splitting parameters
  parser.add_argument("--mon_alpha", type=float, default=1.0)
  parser.add_argument("--mon_max_iter", type=int, default=200)
  parser.add_argument("--mon_tol", type=float, default=1e-2)
  parser.add_argument("--mon_eps", type=float, default=1e-8)
  parser.add_argument("--mon_checks", action='store_true', default=False)

  parser.add_argument("--l1_reg", type=float, default=0.)
  parser.add_argument("--kernel_reg", type=float, default=0.)
  parser.add_argument("--kernel_reg_norm", type=int, default=2)

  # finetuneing
  parser.add_argument("--ckpt_path", type=str, default=None)

  # parse all arguments 
  config = parser.parse_args()
  config.cmd = f"python3 {' '.join(sys.argv)}"

  if config.mode == 'finetune-deq' and config.ckpt_path is None:
    raise ValueError("Need to the 'ckpt_path' of SLL model")
 
  main(config)


